# ==========================================
# STAGE 1: Build de l'application React
# ==========================================
FROM node:18-alpine AS build

# DÃ©finir le rÃ©pertoire de travail
WORKDIR /app

# Copier les fichiers de dÃ©pendances
COPY package*.json ./

# Installer les dÃ©pendances (production + dev pour le build)
RUN npm ci --silent

# Copier tout le code source
COPY . .

# Variables d'environnement pour la production
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
ENV INLINE_RUNTIME_CHUNK=false
ENV REACT_APP_API_URL=http://localhost/api

# Builder l'application React pour la production
RUN npm run build

# ==========================================
# STAGE 2: Copie vers volume partagÃ©
# ==========================================
FROM node:18-alpine AS deploy

# CrÃ©er le rÃ©pertoire de destination
WORKDIR /app

# Copier le build depuis l'Ã©tape prÃ©cÃ©dente
COPY --from=build /app/build ./dist

# CrÃ©er le rÃ©pertoire de partage
RUN mkdir -p /usr/share/web

# Script de dÃ©ploiement
RUN echo '#!/bin/sh' > /deploy.sh && \
    echo 'echo "ðŸš€ DÃ©ploiement du frontend React..."' >> /deploy.sh && \
    echo 'rm -rf /usr/share/web/*' >> /deploy.sh && \
    echo 'cp -r /app/dist/* /usr/share/web/' >> /deploy.sh && \
    echo 'echo "âœ… Frontend dÃ©ployÃ© avec succÃ¨s!"' >> /deploy.sh && \
    echo 'echo "ðŸ“‚ Contenu de /usr/share/web:"' >> /deploy.sh && \
    echo 'ls -la /usr/share/web/' >> /deploy.sh && \
    echo 'echo "ðŸ”„ Maintien du container actif..."' >> /deploy.sh && \
    echo 'sleep infinity' >> /deploy.sh && \
    chmod +x /deploy.sh

# Exposer le port (mÃªme si c'est Caddy qui sert)
EXPOSE 80

# Lancer le script de dÃ©ploiement
CMD ["/deploy.sh"]
