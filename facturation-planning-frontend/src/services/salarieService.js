import axiosInstance from '../axiosInstance';

/**
 * Service pour la gestion des salari√©s
 */
export const salarieService = {
    /**
     * R√©cup√©rer tous les salari√©s
     */
    async getSalaries() {
        try {
            const response = await axiosInstance.get('/salaries');
            console.log('üë• Salari√©s r√©cup√©r√©s:', response.data.length);
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration salari√©s:', error);
            throw error;
        }
    },

    /**
     * R√©cup√©rer un salari√© par ID
     */
    async getSalarieById(id) {
        try {
            const response = await axiosInstance.get(`/salaries/${id}`);
            console.log('üë§ Salari√© r√©cup√©r√©:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration salari√©:', error);
            throw error;
        }
    },

    /**
     * Cr√©er un nouveau salari√©
     */
    async createSalarie(salarieData) {
        try {
            console.log('‚ûï Cr√©ation salari√©:', salarieData);
            const response = await axiosInstance.post('/salaries', salarieData);
            console.log('‚úÖ Salari√© cr√©√©:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur cr√©ation salari√©:', error);
            throw error;
        }
    },

    /**
     * Mettre √† jour un salari√©
     */
    async updateSalarie(id, salarieData) {
        try {
            console.log('üìù Mise √† jour salari√©:', id, salarieData);
            const response = await axiosInstance.put(`/salaries/${id}`, salarieData);
            console.log('‚úÖ Salari√© mis √† jour:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur mise √† jour salari√©:', error);
            throw error;
        }
    },

    /**
     * Supprimer un salari√©
     */
    async deleteSalarie(id) {
        try {
            console.log('üóëÔ∏è Suppression salari√©:', id);
            await axiosInstance.delete(`/salaries/${id}`);
            console.log('‚úÖ Salari√© supprim√©');
            return true;
        } catch (error) {
            console.error('‚ùå Erreur suppression salari√©:', error);
            throw error;
        }
    },

    /**
     * Rechercher des salari√©s
     */
    async searchSalaries(searchTerm) {
        try {
            const response = await axiosInstance.get(`/salaries/search?q=${encodeURIComponent(searchTerm)}`);
            console.log('üîç Recherche salari√©s:', response.data.length, 'r√©sultats');
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur recherche salari√©s:', error);
            throw error;
        }
    },

    /**
     * R√©cup√©rer les salari√©s actifs
     */
    async getActiveSalaries() {
        try {
            const response = await axiosInstance.get('/salaries?status=actif');
            console.log('üë• Salari√©s actifs:', response.data.length);
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration salari√©s actifs:', error);
            throw error;
        }
    },

    /**
     * Mettre √† jour le statut d'un salari√©
     */
    async updateSalarieStatus(id, status) {
        try {
            console.log('üìä Mise √† jour statut salari√©:', id, status);
            const response = await axiosInstance.patch(`/salaries/${id}/status`, { status });
            console.log('‚úÖ Statut salari√© mis √† jour:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur mise √† jour statut salari√©:', error);
            throw error;
        }
    },

    /**
     * Calculer les heures travaill√©es pour un salari√©
     */
    async getHeuresTravaillees(salarieId, dateDebut, dateFin) {
        try {
            const response = await axiosInstance.get(`/salaries/${salarieId}/heures`, {
                params: { date_debut: dateDebut, date_fin: dateFin }
            });
            console.log('‚è∞ Heures travaill√©es:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur calcul heures travaill√©es:', error);
            throw error;
        }
    },

    /**
     * Valider les donn√©es salari√© avant envoi
     */
    validateSalarieData(salarieData) {
        const errors = [];

        // Validation champs obligatoires
        if (!salarieData.nom || salarieData.nom.trim().length < 2) {
            errors.push('Nom obligatoire (minimum 2 caract√®res)');
        }

        if (!salarieData.prenom || salarieData.prenom.trim().length < 2) {
            errors.push('Pr√©nom obligatoire (minimum 2 caract√®res)');
        }

        // Validation email
        if (!salarieData.email || !salarieData.email.includes('@')) {
            errors.push('Email invalide');
        }

        // Validation t√©l√©phone (optionnel mais format si pr√©sent)
        if (salarieData.telephone && !/^[\d\s\-\+\(\)\.]+$/.test(salarieData.telephone)) {
            errors.push('Format de t√©l√©phone invalide');
        }

        // Validation date embauche
        if (salarieData.date_embauche) {
            const dateEmbauche = new Date(salarieData.date_embauche);
            const aujourd_hui = new Date();
            if (dateEmbauche > aujourd_hui) {
                errors.push('La date d\'embauche ne peut pas √™tre dans le futur');
            }
        }

        // Validation salaire (si pr√©sent)
        if (salarieData.salaire_mensuel && (isNaN(salarieData.salaire_mensuel) || salarieData.salaire_mensuel < 0)) {
            errors.push('Salaire mensuel invalide');
        }

        // Validation taux horaire (si pr√©sent)
        if (salarieData.taux_horaire && (isNaN(salarieData.taux_horaire) || salarieData.taux_horaire < 0)) {
            errors.push('Taux horaire invalide');
        }

        return {
            isValid: errors.length === 0,
            errors
        };
    },

    /**
     * Formater les donn√©es pour l'affichage
     */
    formatSalarieData(salarie) {
        return {
            ...salarie,
            nom_complet: `${salarie.prenom} ${salarie.nom}`,
            date_embauche_fr: salarie.date_embauche ?
                new Date(salarie.date_embauche).toLocaleDateString('fr-FR') : '',
            salaire_formate: salarie.salaire_mensuel ?
                `${salarie.salaire_mensuel.toLocaleString('fr-FR')}‚Ç¨` : '',
            taux_horaire_formate: salarie.taux_horaire ?
                `${salarie.taux_horaire}‚Ç¨/h` : ''
        };
    }
};

export default salarieService;
