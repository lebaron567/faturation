import axiosInstance from '../axiosInstance';

/**
 * Service pour la gestion des clients
 */
export const clientService = {
    /**
     * R√©cup√©rer tous les clients
     */
    async getClients() {
        try {
            const response = await axiosInstance.get('/clients');
            console.log('üìã Clients r√©cup√©r√©s:', response.data.length);
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration clients:', error);
            throw error;
        }
    },

    /**
     * R√©cup√©rer un client par ID
     */
    async getClientById(id) {
        try {
            const response = await axiosInstance.get(`/clients/${id}`);
            console.log('üë§ Client r√©cup√©r√©:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration client:', error);
            throw error;
        }
    },

    /**
     * Cr√©er un nouveau client
     */
    async createClient(clientData) {
        try {
            console.log('‚ûï Cr√©ation client:', clientData);
            const response = await axiosInstance.post('/clients', clientData);
            console.log('‚úÖ Client cr√©√©:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur cr√©ation client:', error);
            throw error;
        }
    },

    /**
     * Mettre √† jour un client
     */
    async updateClient(id, clientData) {
        try {
            console.log('üìù Mise √† jour client:', id, clientData);
            const response = await axiosInstance.put(`/clients/${id}`, clientData);
            console.log('‚úÖ Client mis √† jour:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur mise √† jour client:', error);
            throw error;
        }
    },

    /**
     * Supprimer un client
     */
    async deleteClient(id) {
        try {
            console.log('üóëÔ∏è Suppression client:', id);
            await axiosInstance.delete(`/clients/${id}`);
            console.log('‚úÖ Client supprim√©');
            return true;
        } catch (error) {
            console.error('‚ùå Erreur suppression client:', error);
            throw error;
        }
    },

    /**
     * Rechercher des clients
     */
    async searchClients(searchTerm) {
        try {
            const response = await axiosInstance.get(`/clients/search?q=${encodeURIComponent(searchTerm)}`);
            console.log('üîç Recherche clients:', response.data.length, 'r√©sultats');
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur recherche clients:', error);
            throw error;
        }
    },

    /**
     * R√©cup√©rer les clients par type
     */
    async getClientsByType(type) {
        try {
            const response = await axiosInstance.get(`/clients?type=${type}`);
            console.log(`üë• Clients ${type}:`, response.data.length);
            return response.data;
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration clients par type:', error);
            throw error;
        }
    },

    /**
     * Valider les donn√©es client avant envoi
     */
    validateClientData(clientData) {
        const errors = [];

        // Validation email
        if (!clientData.email || !clientData.email.includes('@')) {
            errors.push('Email invalide');
        }

        // Validation type client
        if (!['particulier', 'professionnel'].includes(clientData.type_client)) {
            errors.push('Type de client invalide');
        }

        // Validation sp√©cifique selon le type
        if (clientData.type_client === 'particulier') {
            if (!clientData.nom || !clientData.prenom) {
                errors.push('Nom et pr√©nom obligatoires pour les particuliers');
            }
        } else if (clientData.type_client === 'professionnel') {
            if (!clientData.raison_sociale) {
                errors.push('Raison sociale obligatoire pour les professionnels');
            }
        }

        // Validation t√©l√©phone (optionnel mais format si pr√©sent)
        if (clientData.telephone && !/^[\d\s\-\+\(\)\.]+$/.test(clientData.telephone)) {
            errors.push('Format de t√©l√©phone invalide');
        }

        return {
            isValid: errors.length === 0,
            errors
        };
    }
};

export default clientService;
