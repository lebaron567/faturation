/**
 * Utilitaires pour la gestion des plannings
 */

// Types d'√©v√©nements disponibles (synchronis√©s avec le backend)
export const TYPES_EVENEMENTS = [
  'Absence',
  'Annulation',
  'Cong√©',
  'Divers',
  'Formation',
  'Intervention',
  'Maladie',
  'Rappel t√©l√©phonique',
  'RDV priv√©',
  'R√©union',
  'RTT',
  'Visite m√©dicale'
];

/**
 * R√©cup√®re les types d'√©v√©nements depuis l'API
 * @returns {Promise<Array<string>>} Liste des types d'√©v√©nements
 */
export const fetchTypesEvenements = async () => {
  try {
    const response = await fetch('http://localhost:8080/plannings/types-evenements');
    if (!response.ok) {
      throw new Error('Erreur lors de la r√©cup√©ration des types d\'√©v√©nements');
    }
    return await response.json();
  } catch (error) {
    console.warn('Erreur API, utilisation des types par d√©faut:', error);
    return TYPES_EVENEMENTS;
  }
};/**
 * Retourne l'ic√¥ne associ√©e √† un type d'√©v√©nement
 * @param {string} type - Le type d'√©v√©nement
 * @returns {string} L'ic√¥ne correspondante
 */
export const getTypeEvenementIcon = (type) => {
  const icons = {
    'Absence': 'üö´',
    'Annulation': '‚ùå',
    'Cong√©': 'üèñÔ∏è',
    'Divers': 'üìã',
    'Formation': 'üìö',
    'Intervention': 'üîß',
    'Maladie': 'ü§í',
    'Rappel t√©l√©phonique': 'üìû',
    'RDV priv√©': 'üë§',
    'R√©union': 'üë•',
    'RTT': 'üïê',
    'Visite m√©dicale': 'üè•'
  };

  return icons[type] || 'üìÖ';
};

/**
 * Retourne la couleur associ√©e √† un type d'√©v√©nement
 * @param {string} type - Le type d'√©v√©nement
 * @returns {string} La couleur CSS correspondante
 */
export const getTypeEvenementColor = (type) => {
  const colors = {
    'Absence': '#ff6b6b',
    'Annulation': '#e74c3c',
    'Cong√©': '#3498db',
    'Divers': '#95a5a6',
    'Formation': '#9b59b6',
    'Intervention': '#2ecc71',
    'Maladie': '#e67e22',
    'Rappel t√©l√©phonique': '#f39c12',
    'RDV priv√©': '#34495e',
    'R√©union': '#16a085',
    'RTT': '#8e44ad',
    'Visite m√©dicale': '#c0392b'
  };

  return colors[type] || '#74b9ff';
};

/**
 * V√©rifie si un type d'√©v√©nement n√©cessite des informations de facturation
 * @param {string} type - Le type d'√©v√©nement
 * @returns {boolean} True si la facturation est n√©cessaire
 */
export const requiresFacturation = (type) => {
  const facturableTypes = ['Intervention', 'Formation', 'Divers'];
  return facturableTypes.includes(type);
};

/**
 * Formate l'affichage d'un type d'√©v√©nement avec son ic√¥ne
 * @param {string} type - Le type d'√©v√©nement
 * @returns {string} Le type format√© avec ic√¥ne
 */
export const formatTypeEvenement = (type) => {
  const icon = getTypeEvenementIcon(type);
  return `${icon} ${type}`;
};
