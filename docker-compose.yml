services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
      interval: 10s
      timeout: 3s
      retries: 15
    restart: unless-stopped

  api:
    build:
      context: ./facturation-planning-backend
      dockerfile: Dockerfile
    env_file: .env
    environment:
      DB_DSN: "postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}?sslmode=disable"
      PORT: "8080"
      ENV: "production"
      CORS_ORIGINS: "http://${APP_DOMAIN}"
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Construit le front puis dépose le build dans un volume partagé
  web:
    build:
      context: ./facturation-planning-frontend
      dockerfile: Dockerfile
    env_file: .env
    volumes:
      - webdist:/usr/share/web
    healthcheck:
      test: ["CMD", "ls", "/usr/share/web/index.html"]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      - api

  caddy:
    image: caddy:2-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddydata:/data
      - caddyconfig:/config
      - webdist:/usr/share/web:ro
    depends_on:
      - api
      - web
    restart: unless-stopped

volumes:
  dbdata:
  webdist:
  caddydata:
  caddyconfig:
