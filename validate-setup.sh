#!/bin/bash

# Test script to validate our deployment and security scripts
# This script runs basic syntax and validation checks

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] ‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

# Check script syntax
check_script_syntax() {
    local script=$1
    log "Checking syntax for $script..."
    
    if [ ! -f "$script" ]; then
        log_error "Script $script not found"
        return 1
    fi
    
    # Check for shebang
    if ! head -1 "$script" | grep -q "^#!"; then
        log_warning "Script $script missing shebang"
    fi
    
    # Use bash -n to check syntax (won't work in Windows, but we can check structure)
    # For now, just check if it's readable and has execute permissions concept
    if [ -r "$script" ]; then
        log_success "Script $script is readable"
    else
        log_error "Script $script is not readable"
        return 1
    fi
    
    # Check for basic script structure
    if grep -q "function\|^[a-zA-Z_][a-zA-Z0-9_]*(" "$script"; then
        log_success "Script $script has function definitions"
    else
        log_warning "Script $script may not have function definitions"
    fi
    
    return 0
}

# Test scripts
test_all_scripts() {
    log "üß™ Testing all scripts..."
    
    local scripts=(
        "backup.sh"
        "restore.sh"
        "deploy-enhanced.sh"
        "security-hardening.sh"
        "setup-monitoring.sh"
    )
    
    local failed=0
    
    for script in "${scripts[@]}"; do
        if check_script_syntax "$script"; then
            log_success "‚úÖ $script passed syntax check"
        else
            log_error "‚ùå $script failed syntax check"
            failed=$((failed + 1))
        fi
        echo ""
    done
    
    if [ $failed -eq 0 ]; then
        log_success "üéâ All scripts passed syntax validation!"
    else
        log_error "‚ùå $failed script(s) failed validation"
        return 1
    fi
}

# Test Docker configuration
test_docker_config() {
    log "üê≥ Testing Docker configuration..."
    
    if [ ! -f "docker-compose.yml" ]; then
        log_error "docker-compose.yml not found"
        return 1
    fi
    
    # Check if Docker Compose file is valid (basic check)
    if grep -q "version:" docker-compose.yml; then
        log_success "docker-compose.yml has version declaration"
    else
        log_warning "docker-compose.yml missing version declaration"
    fi
    
    if grep -q "services:" docker-compose.yml; then
        log_success "docker-compose.yml has services section"
    else
        log_error "docker-compose.yml missing services section"
        return 1
    fi
    
    # Check for logging configuration
    if grep -q "logging:" docker-compose.yml; then
        log_success "docker-compose.yml has logging configuration"
    else
        log_warning "docker-compose.yml missing logging configuration"
    fi
    
    return 0
}

# Test monitoring configuration
test_monitoring_config() {
    log "üìä Testing monitoring configuration..."
    
    if [ ! -d "monitoring" ]; then
        log_warning "monitoring directory not found"
        return 1
    fi
    
    if [ ! -f "monitoring/docker-compose.yml" ]; then
        log_error "monitoring/docker-compose.yml not found"
        return 1
    fi
    
    if grep -q "uptime-kuma" monitoring/docker-compose.yml; then
        log_success "Uptime Kuma service found in monitoring config"
    else
        log_error "Uptime Kuma service not found in monitoring config"
        return 1
    fi
    
    return 0
}

# Test API health endpoint
test_api_health() {
    log "üè• Testing API health endpoint..."
    
    if command -v curl > /dev/null; then
        if curl -f -s http://localhost:8080/health > /dev/null; then
            local response=$(curl -s http://localhost:8080/health)
            if echo "$response" | grep -q "healthy"; then
                log_success "API health endpoint is working and returns healthy status"
            else
                log_warning "API health endpoint responds but status unclear"
            fi
        else
            log_warning "API health endpoint not accessible (service may not be running)"
        fi
    else
        log_warning "curl not available, skipping API health test"
    fi
}

# Main test function
main() {
    log "üîç Starting validation tests..."
    echo ""
    
    local failed_tests=0
    
    # Test scripts
    if ! test_all_scripts; then
        failed_tests=$((failed_tests + 1))
    fi
    echo ""
    
    # Test Docker config
    if ! test_docker_config; then
        failed_tests=$((failed_tests + 1))
    fi
    echo ""
    
    # Test monitoring config
    if ! test_monitoring_config; then
        failed_tests=$((failed_tests + 1))
    fi
    echo ""
    
    # Test API health
    test_api_health
    echo ""
    
    # Summary
    if [ $failed_tests -eq 0 ]; then
        log_success "üéâ All validation tests passed!"
        echo ""
        echo "‚úÖ Scripts are syntactically correct"
        echo "‚úÖ Docker configuration is valid"
        echo "‚úÖ Monitoring configuration is present"
        echo "‚úÖ System appears to be working correctly"
    else
        log_error "‚ùå $failed_tests test category(ies) failed"
        echo ""
        echo "Please review the errors above and fix any issues."
        return 1
    fi
}

# Show help
show_help() {
    echo "Validation Test Script for Facturation Planning Application"
    echo ""
    echo "Usage: $0 [OPTION]"
    echo ""
    echo "Options:"
    echo "  --help, -h    Show this help message"
    echo ""
    echo "This script will test:"
    echo "  - Script syntax validation"
    echo "  - Docker configuration"
    echo "  - Monitoring setup"
    echo "  - API health endpoint"
}

# Parse command line arguments
case "${1:-}" in
    --help|-h)
        show_help
        exit 0
        ;;
    "")
        main
        ;;
    *)
        log_error "Unknown option: $1"
        show_help
        exit 1
        ;;
esac