# Configuration Docker Compose optimisée pour VPS 8Go RAM
version: '3.8'

services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # Optimisations PostgreSQL pour 8Go RAM
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    # Limites ressources
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  api:
    build:
      context: ./facturation-planning-backend
      dockerfile: Dockerfile
    environment:
      DB_HOST: "db"
      DB_PORT: "5432"
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      PORT: "8080"
      ENV: "production"
      JWT_SECRET: ${JWT_SECRET}
      # Optimisations Go
      GOMAXPROCS: "2"  # Utilise les 2 vCPU
      GOMEMLIMIT: "1GiB"  # Limite mémoire Go
    ports:
      - "8080:8080"
    # Limites ressources
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  web:
    build:
      context: ./facturation-planning-frontend
      dockerfile: Dockerfile
    volumes:
      - webdist:/usr/share/web
    # Limites ressources (très léger)
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    depends_on:
      - api
    restart: unless-stopped

  caddy:
    image: caddy:2-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddydata:/data
      - caddyconfig:/config
      - webdist:/usr/share/web:ro
    # Limites ressources
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    depends_on:
      - api
      - web
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Monitoring avec ressources limitées
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 3 * * *  # 3h du matin
    deploy:
      resources:
        limits:
          memory: 128M
    restart: unless-stopped

volumes:
  dbdata:
  webdist:
  caddydata:
  caddyconfig: