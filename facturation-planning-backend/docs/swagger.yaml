basePath: /
definitions:
  models.Client:
    properties:
      adresse:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      entreprise_id:
        type: integer
      id:
        type: integer
      nom:
        type: string
      telephone:
        type: string
      updated_at:
        type: string
    type: object
  models.Devis:
    type: object
  models.Entreprise:
    properties:
      adresse:
        example: 123 rue du Code
        type: string
      bic:
        example: BIC12345
        type: string
      created_at:
        example: "2025-03-17T14:09:30.706109+01:00"
        type: string
      deleted_at:
        type: string
      email:
        example: contact@maboite.com
        type: string
      iban:
        example: FR7612345987650123456789014
        type: string
      id:
        example: 1
        type: integer
      nom:
        example: MaBoite
        type: string
      responsable:
        example: Jean Dupont
        type: string
      siret:
        example: "12345678901234"
        type: string
      telephone:
        example: "+33123456789"
        type: string
      tva:
        example: FR12345678901
        type: string
      updated_at:
        example: "2025-03-17T14:09:30.706109+01:00"
        type: string
    type: object
  models.Facture:
    properties:
      created_at:
        example: "2025-03-17T14:09:30.706109+01:00"
        type: string
      date_echeance:
        example: "2025-04-17"
        type: string
      date_emission:
        example: "2025-03-17"
        type: string
      deleted_at:
        type: string
      description:
        example: Facture pour prestation de services
        type: string
      entreprise_id:
        example: 5
        type: integer
      id:
        example: 1
        type: integer
      montant_ht:
        example: 1000.5
        type: number
      montant_ttc:
        example: 1200.6
        type: number
      numero:
        example: FAC-2025-001
        type: string
      planning_id:
        description: Lien avec le planning si applicable
        example: 3
        type: integer
      statut:
        description: '"payée", "en attente", "rejetée"'
        example: en attente
        type: string
      taux_tva:
        example: 20
        type: number
      type:
        description: '"standard", "etat_avancement", "auto_liquidation"'
        example: standard
        type: string
      updated_at:
        example: "2025-03-17T14:09:30.706109+01:00"
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        example: contact@maboite.com
        type: string
      password:
        example: securepass
        type: string
    type: object
  models.Planning:
    properties:
      client:
        allOf:
        - $ref: '#/definitions/models.Client'
        description: <-- ajoute cette ligne
      client_id:
        type: integer
      created_at:
        type: string
      date:
        type: string
      deleted_at:
        type: string
      entreprise_id:
        type: integer
      facturation:
        type: string
      facture:
        $ref: '#/definitions/models.Facture'
      forfait_ht:
        type: number
      heure_debut:
        type: string
      heure_fin:
        type: string
      id:
        type: integer
      nb_repetitions:
        description: combien de fois on le répète
        type: integer
      objet:
        type: string
      periodicite:
        type: integer
      prestation:
        type: string
      salarie:
        allOf:
        - $ref: '#/definitions/models.Salarie'
        description: ✅ Corrigé
      salarie_id:
        type: integer
      taux_horaire:
        type: number
      type_evenement:
        type: string
      updated_at:
        type: string
    type: object
  models.RegisterEntrepriseRequest:
    properties:
      email:
        example: contact@maboite.com
        type: string
      nom:
        example: MaBoite
        type: string
      password:
        example: securepass
        type: string
    type: object
  models.Salarie:
    properties:
      created_at:
        example: "2025-03-17T14:09:30.706109+01:00"
        type: string
      deleted_at:
        type: string
      email:
        example: jean.dupont@example.com
        type: string
      entreprise_id:
        example: 5
        type: integer
      id:
        example: 1
        type: integer
      nom:
        example: Jean Dupont
        type: string
      telephone:
        example: "+33123456789"
        type: string
      updated_at:
        example: "2025-03-17T14:09:30.706109+01:00"
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API pour gérer la facturation et les plannings
  title: Facturation API
  version: "1.0"
paths:
  /devis:
    post:
      consumes:
      - application/json
      description: Crée un devis avec les informations client, les dates et les lignes
        de devis
      parameters:
      - description: Données du devis à créer
        in: body
        name: devis
        required: true
        schema:
          $ref: '#/definitions/models.Devis'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Devis'
        "400":
          description: Requête invalide
          schema:
            type: string
        "500":
          description: Erreur serveur
          schema:
            type: string
      summary: Créer un devis complet
      tags:
      - Devis
  /factures:
    get:
      description: Retourne la liste complète des factures en base de données
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Facture'
            type: array
      summary: Lister toutes les factures
    post:
      consumes:
      - application/json
      description: Ajoute une nouvelle facture en base de données
      parameters:
      - description: Détails de la facture
        in: body
        name: facture
        required: true
        schema:
          $ref: '#/definitions/models.Facture'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Facture'
        "400":
          description: Requête invalide
          schema:
            type: string
        "500":
          description: Erreur serveur
          schema:
            type: string
      summary: Créer une facture
  /factures/{id}/pdf:
    get:
      description: Génère un PDF pour une facture donnée
      parameters:
      - description: ID de la facture
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/pdf
      responses:
        "200":
          description: OK
          schema:
            type: file
        "404":
          description: Facture non trouvée
          schema:
            type: string
      summary: Récupérer une facture en PDF
  /login:
    post:
      consumes:
      - application/json
      description: Permet de se connecter avec un email et un mot de passe pour récupérer
        un token JWT
      parameters:
      - description: Identifiants de connexion
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token JWT généré
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Requête invalide
          schema:
            type: string
        "401":
          description: Email ou mot de passe incorrect
          schema:
            type: string
        "500":
          description: Erreur serveur
          schema:
            type: string
      summary: Connexion d'une entreprise
  /plannings:
    get:
      description: Retourne la liste complète des plannings enregistrés
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Planning'
            type: array
      summary: Récupérer tous les plannings
    post:
      consumes:
      - application/json
      description: Ajoute un nouveau planning en base de données
      parameters:
      - description: Détails du planning
        in: body
        name: planning
        required: true
        schema:
          $ref: '#/definitions/models.Planning'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Planning'
        "400":
          description: Requête invalide
          schema:
            type: string
        "500":
          description: Erreur serveur
          schema:
            type: string
      summary: Créer un planning
  /plannings/{id}:
    delete:
      description: Supprime un planning par son ID
      parameters:
      - description: ID du planning
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Planning non trouvé
          schema:
            type: string
        "500":
          description: Erreur serveur
          schema:
            type: string
      summary: Supprimer un planning
    put:
      consumes:
      - application/json
      description: Met à jour un planning existant par son ID
      parameters:
      - description: ID du planning
        in: path
        name: id
        required: true
        type: integer
      - description: Nouvelles informations du planning
        in: body
        name: planning
        required: true
        schema:
          $ref: '#/definitions/models.Planning'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Planning'
        "400":
          description: Requête invalide
          schema:
            type: string
        "404":
          description: Planning non trouvé
          schema:
            type: string
        "500":
          description: Erreur serveur
          schema:
            type: string
      summary: Modifier un planning
  /profile:
    get:
      description: Retourne les informations de l'entreprise actuellement connectée
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Entreprise'
        "401":
          description: Non autorisé
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Récupérer le profil de l'entreprise connectée
  /register:
    post:
      consumes:
      - application/json
      description: Permet de créer un compte entreprise en renseignant un nom, un
        email et un mot de passe
      parameters:
      - description: Détails de l'entreprise
        in: body
        name: entreprise
        required: true
        schema:
          $ref: '#/definitions/models.RegisterEntrepriseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Compte créé avec succès
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Requête invalide
          schema:
            type: string
        "409":
          description: Email déjà utilisé
          schema:
            type: string
        "500":
          description: Erreur serveur
          schema:
            type: string
      summary: Créer une entreprise (inscription)
  /salaries:
    get:
      description: Retourne la liste des salariés enregistrés
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Salarie'
            type: array
      summary: Récupérer tous les salariés
    post:
      consumes:
      - application/json
      description: Ajoute un nouveau salarié à la base de données
      parameters:
      - description: Détails du salarié
        in: body
        name: salarie
        required: true
        schema:
          $ref: '#/definitions/models.Salarie'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Salarie'
        "400":
          description: Requête invalide
          schema:
            type: string
        "500":
          description: Erreur serveur
          schema:
            type: string
      summary: Créer un salarié
swagger: "2.0"
